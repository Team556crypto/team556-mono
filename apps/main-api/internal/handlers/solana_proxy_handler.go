package handlers

import (
	"bytes"
	"encoding/json"
	"io"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/gofiber/fiber/v2"
)

// SolanaPaymentRequestPayload defines the structure expected from the WordPress plugin
type SolanaPaymentRequestPayload struct {
	MerchantWallet string  `json:"merchant_wallet"`
	Amount         float64 `json:"amount"`
	Network        string  `json:"network"` // e.g., "mainnet", "devnet"
	Reference      string  `json:"reference"` // Unique reference generated by WP
	Description    string  `json:"description,omitempty"`
	OrderID        *int    `json:"order_id,omitempty"` // Use pointer for optional fields
}

// SolanaApiResponse defines the expected successful response structure from the solana-api
type SolanaApiResponse struct {
	SolanaPayURL string `json:"solana_pay_url"`
	// Add other fields if the solana-api returns more data
}

// HandleCreateSolanaPaymentRequest handles the request from the WP plugin to create a payment request via Solana API
func HandleCreateSolanaPaymentRequest(c *fiber.Ctx) error {
	payload := new(SolanaPaymentRequestPayload)

	if err := c.BodyParser(payload); err != nil {
		log.Printf("Error parsing request body: %v", err)
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": "Invalid request body",
		})
	}

	// --- Basic Validation --- 
	if payload.MerchantWallet == "" || payload.Amount <= 0 || payload.Reference == "" {
		log.Printf("Validation failed for payment request: %+v", payload)
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": "Missing required fields (merchant_wallet, amount, reference)",
		})
	}
    
    // Validate network if necessary (e.g., allow only 'mainnet' or 'devnet')
    if payload.Network != "mainnet-beta" && payload.Network != "devnet" && payload.Network != "mainnet" { // Allow 'mainnet' as alias for mainnet-beta
         payload.Network = "mainnet-beta" // Default or correct common WP input
         // Alternatively, return an error:
         // log.Printf("Invalid network specified: %s", payload.Network)
         // return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
         //  "error": "Invalid network specified. Use 'mainnet-beta' or 'devnet'.",
         // })
    }

	log.Printf("Received Solana payment request from WP: %+v", payload)

	// --- Call Solana API Endpoint --- 
	// Prepare data for Solana API (might be the same or slightly different)
	solanaApiPayload := payload // Assuming the solana-api expects the same structure for now

	// Get Solana API URL from environment variable
	solanaApiUrl := os.Getenv("SOLANA_API_PAYMENT_URL")
	if solanaApiUrl == "" {
		log.Println("Error: SOLANA_API_PAYMENT_URL environment variable not set.")
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "Payment processing service configuration error.",
		})
	}

    // Use Go's standard library to make the HTTP request
    requestBodyBytes, err := json.Marshal(solanaApiPayload)
    if err != nil {
        log.Printf("Error marshaling request to Solana API: %v", err)
        return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Internal server error preparing request."})
    }

    req, err := http.NewRequest("POST", solanaApiUrl, bytes.NewBuffer(requestBodyBytes))
    if err != nil {
        log.Printf("Error creating request to Solana API: %v", err)
        return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Internal server error creating request."})
    }
    req.Header.Set("Content-Type", "application/json")
    // Add any necessary auth headers for solana-api (e.g., internal API key)
    internalApiKey := os.Getenv("SOLANA_API_INTERNAL_KEY")
    if internalApiKey != "" {
        req.Header.Set("X-Internal-Api-Key", internalApiKey) 
    }
    // Add a User-Agent or other identifying header
    req.Header.Set("User-Agent", "Team556-Main-API/1.0")

    client := &http.Client{Timeout: 15 * time.Second}
    log.Printf("Sending request to Solana API: %s Payload: %s", solanaApiUrl, string(requestBodyBytes))
    resp, err := client.Do(req)
    if err != nil {
        log.Printf("Error sending request to Solana API: %v", err)
        // Distinguish between timeout and other connection errors if needed
        if os.IsTimeout(err) {
             return c.Status(fiber.StatusGatewayTimeout).JSON(fiber.Map{"error": "Request to Solana service timed out."})
        } 
        return c.Status(fiber.StatusServiceUnavailable).JSON(fiber.Map{"error": "Failed to communicate with Solana service."})
    }
    defer resp.Body.Close()

    responseBodyBytes, readErr := io.ReadAll(resp.Body) // Read body early for logging
    if readErr != nil {
        log.Printf("Error reading response body from Solana API: %v", readErr)
         // Even if reading fails, still check status code
    }

    log.Printf("Received response from Solana API (Status: %d): %s", resp.StatusCode, string(responseBodyBytes))

    if resp.StatusCode >= 400 {
        // Try to parse error details if JSON is expected for logging/internal metrics
        var errorResponse map[string]interface{}
        if json.Unmarshal(responseBodyBytes, &errorResponse) == nil {
            // If parsing succeeds, maybe log a specific field
            if msg, ok := errorResponse["error"].(string); ok {
                log.Printf("Parsed error message from Solana API: %s", msg)
            }
        }
        
        return c.Status(fiber.StatusBadGateway).JSON(fiber.Map{
            "error": "Received error from Solana service.",
            // Avoid sending raw internal details back to WP plugin unless needed for debugging
            // "details": details, 
        })
    }

    // If readErr occurred earlier but status is OK, this might fail
    if readErr != nil {
        log.Printf("Error reading Solana API response body (status was %d): %v", resp.StatusCode, readErr)
        return c.Status(fiber.StatusBadGateway).JSON(fiber.Map{"error": "Error reading response from Solana service."})
    }

    var solanaResponse SolanaApiResponse
    if err := json.Unmarshal(responseBodyBytes, &solanaResponse); err != nil {
        log.Printf("Error decoding successful response from Solana API: %v", err)
        return c.Status(fiber.StatusBadGateway).JSON(fiber.Map{"error": "Invalid response format received from Solana service."})
    }

    // Validate the received URL (basic check)
    if solanaResponse.SolanaPayURL == "" || !strings.HasPrefix(solanaResponse.SolanaPayURL, "solana:") {
        log.Printf("Invalid or missing solana_pay_url in response: %s", solanaResponse.SolanaPayURL)
        return c.Status(fiber.StatusBadGateway).JSON(fiber.Map{"error": "Invalid payment URL received from Solana service."})
    }

    log.Printf("Successfully processed Solana payment request. Reference: %s, URL: %s", payload.Reference, solanaResponse.SolanaPayURL)

    // If successful, return the Solana Pay URL received from the solana-api
    return c.Status(fiber.StatusOK).JSON(fiber.Map{
        "solana_pay_url": solanaResponse.SolanaPayURL,
        "reference":      payload.Reference, // Also return the reference for potential client-side tracking
    })
}
